buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven { url 'https://www.dogforce-games.com/maven/' }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // Patchouli
        url "https://maven.blamejared.com"
    }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
}

version = mod_version
group = 'com.thenatekirby.compote'
archivesBaseName = mod_id

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: "${mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            // arg "-mixin.config=babel.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                Compote {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // arg "-mixin.config=babel.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                Compote {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            // arg "-mixin.config=babel.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'babel', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                Compote {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//mixin {
//    add sourceSets.main, 'babel.refmap.json'
//}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    if (project.hasProperty('jei_version')) {
        compileOnly fg.deobf("mezz.jei:jei-${project.jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${project.jei_version}")
    }

    if (findProject(':Babel') != null) {
        implementation project(':Babel')
    } else {
        // TODO: Maven
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "MixinConfigs": "babel.mixins.json",
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "thenatekirby",
                "Specification-Version": "${mc_version}",
                "Implementation-Title": mod_id,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"thenatekirby",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
